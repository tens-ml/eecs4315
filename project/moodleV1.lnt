module moodleV1 
with ==, !=, get, set 
is

------------------------------------------------------------------------
--  Types
------------------------------------------------------------------------
    type natList is list of nat with head, tail, member, empty end type
    -- type course is eecs, humanities, science, arts, empty end type
    type course is humanities, science, empty end type
    type assessment is quiz, midterm, assignment, empty end type 
    type content is lecture, video, empty end type
    type announcement is update, reminder, empty end type
    type grade is pass, fail end type   
    type gradedAssessment is tuple(a: assessment, g: grade) end type 
    type assessmentList is list of assessment with head, tail, member, empty end type 
    
------------------------------------------------------------------------
--  Channels
------------------------------------------------------------------------

    channel gradedAssessmentChannel is (ga: gradedAssessment), () end channel
    channel assessmentChannel is (a: assessment) end channel
    channel courseChannel is (c: course) end channel
    channel contentChannel is (c: content) end channel
    channel boolChannel is (b: bool) end channel
    channel announcementChannel is (a:announcement) end channel
    channel enrollmentChannel is (c: course, sid: nat) end channel
    channel submissionChannel is (a: assessment, sid: nat) end channel


------------------------------------------------------------------------
--  Processes
------------------------------------------------------------------------
    process Main [
        ENROLL: enrollmentChannel,
        ASSIGN: courseChannel, 
        SERVECONTENT, UPSERTCONTENT, VIEWCONTENT: contentChannel, 
        VIEWASSESSMENT, ANNOUNCEASSESSMENT, UPSERTASSESSMENT: assessmentChannel,
        SUBMITASSESSMENT, FORWARDSUBMISSION: submissionChannel, 
        GRADEASSESSMENT: gradedAssessmentChannel, 
        RECEIVESUBMISSION: boolChannel, 
        ANNOUNCEINFO, SENDINFO: announcementChannel
    ] is
        var studentId1, studentId2: nat in 
            studentId1 := 1;
            studentId2 := 2;

            par      
                ENROLL, ASSIGN
                -> SystemAdmin[ENROLL, ASSIGN] 
                ({studentId1, studentId2})
            ||    
                ENROLL, ANNOUNCEASSESSMENT, SERVECONTENT, SUBMITASSESSMENT, RECEIVESUBMISSION, GRADEASSESSMENT, ANNOUNCEINFO 
                -> Student[ENROLL, SERVECONTENT, VIEWCONTENT, ANNOUNCEASSESSMENT, VIEWASSESSMENT, SUBMITASSESSMENT, GRADEASSESSMENT, RECEIVESUBMISSION, ANNOUNCEINFO]
                (studentId1)
            ||    
                ENROLL, ANNOUNCEASSESSMENT, SERVECONTENT, SUBMITASSESSMENT, RECEIVESUBMISSION, GRADEASSESSMENT, ANNOUNCEINFO 
                -> Student[ENROLL, SERVECONTENT, VIEWCONTENT, ANNOUNCEASSESSMENT, VIEWASSESSMENT, SUBMITASSESSMENT, GRADEASSESSMENT, RECEIVESUBMISSION, ANNOUNCEINFO]
                (studentId2)
            ||
                ENROLL, ASSIGN, UPSERTASSESSMENT, UPSERTCONTENT, GRADEASSESSMENT, FORWARDSUBMISSION, SENDINFO 
                -> Instructor[ENROLL, ASSIGN, UPSERTASSESSMENT, FORWARDSUBMISSION, UPSERTCONTENT, GRADEASSESSMENT, SENDINFO]
            ||
                UPSERTASSESSMENT, ANNOUNCEASSESSMENT, SERVECONTENT, UPSERTCONTENT, ANNOUNCEINFO, SENDINFO
                -> CourseManagement[UPSERTASSESSMENT, ANNOUNCEASSESSMENT, SERVECONTENT, UPSERTCONTENT, ANNOUNCEINFO, SENDINFO]
            ||
                SUBMITASSESSMENT, FORWARDSUBMISSION, RECEIVESUBMISSION 
                -> AssessmentManagement[SUBMITASSESSMENT, FORWARDSUBMISSION, RECEIVESUBMISSION]
            end par
        end var
    end process
    
------------------------------------------------------------------------

    -- USER BEHAVIOURS
    process SystemAdmin[
        ENROLL: enrollmentChannel,
        ASSIGN: courseChannel
    ] (in var students: natList) is 
    
        
    var c: course in 
        -- Lina: fix cheat for v2
        -- Lina: list of classes assigned, and then enrol a class that is member of this list
        c := any course where c != empty;
        
        loop
                select  
                    -- assign some course to instructor
                    if students != {} then
                      ASSIGN(c)
                      -- Lina: add the classes that you assigned in a list
                    end if
                []
                    -- enroll next student in some course (next student = first in student list; sequential enrollment)
                    if students != {} then
                        -- select a class from the ones where you assigned a teacher
                        ENROLL(c, head(students));
                        students := tail(students)
                    end if
                end select
        end loop
     end var
    end process
    
------------------------------------------------------------------------

    process Student [
        ENROLL: enrollmentChannel, 
        SERVECONTENT, VIEWCONTENT: contentChannel, 
        ANNOUNCEASSESSMENT, VIEWASSESSMENT: assessmentChannel,
        SUBMITASSESSMENT: submissionChannel,
        GRADEASSESSMENT: gradedAssessmentChannel,
        RECEIVESUBMISSION: boolChannel, RECEIVEANNOUNCEMENT: announcementChannel
    ] (studentId: nat) is 
        var c: course, a: assessment, courseContent: content, ga: gradedAssessment, receivedSubmission: bool, info: announcement in
            c := empty;
            a := empty;
            info := empty;
            courseContent := empty;
            receivedSubmission := false;
            use info; use receivedSubmission;
            loop 
                select 
                    -- receive enrollment from admin (if id matches)
                    var tempCourse: course, tempId: nat in
                        ENROLL(?tempCourse, ?tempId);
                        if tempId == studentId then
                          c := tempCourse
                        end if
                    end var
                []
                    if c != empty then
                        select
                            -- receive content from CMS
                            SERVECONTENT(?courseContent)
                        []
                            -- receive assessment from CMS
                            ANNOUNCEASSESSMENT(?a)
                        []
                            -- view content that has been received
                            if courseContent != empty then
                                VIEWCONTENT(courseContent)
                            end if
                        []
                            if a != empty then
                                select
                                    -- view assessment that has been received
                                    VIEWASSESSMENT(a)
                                []
                                    -- submit assessment that has been received
                                    SUBMITASSESSMENT(a, studentId)
                                end select
                            end if
                        []
                            -- receipt from AMS after submission
                            RECEIVESUBMISSION(?receivedSubmission);
                            use receivedSubmission -- remove warning
                        []
                            -- receive graded assessment from instructor
                            GRADEASSESSMENT(?ga);
                            use ga -- remove warning
                        [] 
                            -- receive instructor announcement from CMS
                            RECEIVEANNOUNCEMENT(?info);
                            use info -- remove warning
                        end select
                    end if
                end select
            end loop
        end var
    end process
  
------------------------------------------------------------------------

    process Instructor[
        ENROLL: enrollmentChannel,
        ASSIGN: courseChannel, 
        UPSERTASSESSMENT: assessmentChannel, 
        FORWARDSUBMISSION: submissionChannel,
        UPSERTCONTENT: contentChannel, 
        GRADEASSESSMENT: gradedAssessmentChannel, 
        SENDINFO: announcementChannel
    ] is 
        var c: course, info: announcement, myStudents: natList, mySubmissions: assessmentList, studentEnrolled: bool in  
            studentEnrolled := false;    
            c := empty;
            myStudents := {};
            mySubmissions := {};
            loop
                select 
                    -- receive course from admin
                    ASSIGN(?c)
                []
                    -- receive enrollment event from admin (if it is for the instructors assigned course)
                    if c != empty then 
                        var tempCourse: course, tempId: nat in
                            ENROLL(?tempCourse, ?tempId) where tempCourse == c; 
                            myStudents := cons(tempId, myStudents);
                            studentEnrolled := true
                        end var
                    end if
                []
                    -- post course content/assessments to CMS
                    if (c != empty) and studentEnrolled then 
                        select 
                            UPSERTASSESSMENT(quiz) 
                        [] 
                            UPSERTASSESSMENT(midterm) 
                        [] 
                            UPSERTASSESSMENT(assignment) 
                        []
                            UPSERTCONTENT(lecture)
                        []
                            UPSERTCONTENT(video)
                        []
                            -- receive submission from assessment system
                            var tempAssessment: assessment, tempId: nat in
                                FORWARDSUBMISSION(?tempAssessment, ?tempId) where member(tempId, myStudents);
                                mySubmissions := cons(tempAssessment, mySubmissions)
                            end var
                        []
                            -- grade assessment if one exists (pass/fail), send graded to student
                            if not(empty(mySubmissions)) then
                                select
                                    GRADEASSESSMENT(tuple( head(mySubmissions), pass ))
                                []
                                    GRADEASSESSMENT(tuple( head(mySubmissions), fail ))
                                end select;
                                mySubmissions := tail(mySubmissions)
                            end if
                        []
                            SENDINFO(update)
                        []
                            SENDINFO(reminder)
                        end select  		    
                    end if 
                end select
            end loop
        end var
    end process

------------------------------------------------------------------------

    -- INTERNAL SUBSYSTEMS
    process CourseManagement[
        RECEIVEASSESSMENT, ANNOUNCEASSESSMENT: assessmentChannel,
         SERVECONTENT, UPSERTCONTENT: contentChannel, 
         ANNOUNCEINFO, RECEIVEINFO: announcementChannel
    ] is
        var a: assessment, courseContent: content, info: announcement in 
            a := empty;
            info := empty;
            courseContent := empty;
            loop
                select
                    -- receive assessment from instructor
                    RECEIVEASSESSMENT(?a)
                []
                    -- receive content from instructor
                    UPSERTCONTENT(?courseContent)
                []
                    -- forward assessment to student
                    if a != empty then
                        ANNOUNCEASSESSMENT(a);
                        a := empty
                    end if 
                []
                    -- forward content to student
                    if courseContent != empty then
                        SERVECONTENT(courseContent);
                        courseContent := empty
                    end if
                []
                    RECEIVEINFO(?info)
                []
                    -- forward announcement to student
                    if info != empty then 
                        ANNOUNCEINFO(info);
                        info := empty
                    end if 
                end select
            end loop
        end var
    end process

------------------------------------------------------------------------

    process AssessmentManagement[
        SUBMITASSESSMENT, FORWARDSUBMISSION: submissionChannel, 
        RECEIVESUBMISSION: boolChannel
    ] is
        var submission: assessment, studentId: nat in
            submission := empty;
            studentId := 0;
            loop
                -- check and see if prev assignment forwarded yet, if not, forward it first
                if submission != empty then 
                    FORWARDSUBMISSION(submission, studentId);
                    submission := empty
                end if;

                -- receive submission from student
                SUBMITASSESSMENT(?submission, ?studentId);

                -- acknowledge receipt to student
                RECEIVESUBMISSION(true)
            end loop
        end var
    end process
end module
